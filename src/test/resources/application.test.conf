akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = DEBUG
  jvm-exit-on-fatal-error=off
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 60s  #added so test doesn't fail waiting for logger startup

  inmemory-read-journal {
    # New events are retrieved (polled) with this interval.
    refresh-interval = "100ms"

    offset-mode = "sequence"

    # Absolute path to the write journal plugin configuration section
    write-plugin = "inmemory-journal"

    # How many events to fetch in one query (replay) and keep buffered until they
    # are delivered downstreams.
    max-buffer-size = "5000"
  }
}

akka.persistence.journal.plugin = "akka.persistence.journal.inmem"
akka.persistence.snapshot-store.local.dir = "target/snapshots"
akka.logger-startup-timeout = 160s // needed so we don't get exception timing out on logger during test.
akka.persistence.journal.leveldb.native = false

mongo-async-driver {
  # Control log level to the console on standard out
  stdout-loglevel = "ERROR"

  akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = DEBUG
    jvm-exit-on-fatal-error=off
  }

  # Control log level to log files
  loglevel = "WARNING"

  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  log-config-on-start = off

  # Controls how many dea letter messages are logged
  log-dead-letters = 10

  # Controls whether dead letters are logged during shutdown of actor system
  log-dead-letters-during-shutdown = off
}

cloudinary = {
  cloud_name = "test"
  api_key = "123456789"
  api_secret = "123456789"
}

influxDb {
  host = "localhost"
  port = 8086
  username = "root"
  password = "root"

  database = "soheila.cms.metrics"
}
